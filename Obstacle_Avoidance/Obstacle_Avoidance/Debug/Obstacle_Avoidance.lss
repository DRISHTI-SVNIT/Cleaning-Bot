
Obstacle_Avoidance.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000005da  0000066e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800106  00800106  00000674  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000674  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000006a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000065f  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003c7  00000000  00000000  00000ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051b  00000000  00000000  000011a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000014c  00000000  00000000  000016c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ba  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000370  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000070  00000000  00000000  00001e3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	02 c1       	rjmp	.+516    	; 0x21a <__vector_5>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea ed       	ldi	r30, 0xDA	; 218
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a6 e0       	ldi	r26, 0x06	; 6
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	af 30       	cpi	r26, 0x0F	; 15
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	02 d0       	rcall	.+4      	; 0xc8 <main>
  c4:	88 c2       	rjmp	.+1296   	; 0x5d6 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <main>:

 volatile int a = 0;

 int main()
 {
	USART_Init(12,0);
  c8:	60 e0       	ldi	r22, 0x00	; 0
  ca:	8c e0       	ldi	r24, 0x0C	; 12
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	bb d0       	rcall	.+374    	; 0x246 <USART_Init>
	ultrasonic_init();
  d0:	15 d0       	rcall	.+42     	; 0xfc <ultrasonic_init>
	sei();
  d2:	78 94       	sei
		while(1)
		{	
			trigger(0);
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	40 d0       	rcall	.+128    	; 0x158 <trigger>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d8:	2f ef       	ldi	r18, 0xFF	; 255
  da:	80 e7       	ldi	r24, 0x70	; 112
  dc:	92 e0       	ldi	r25, 0x02	; 2
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	80 40       	sbci	r24, 0x00	; 0
  e2:	90 40       	sbci	r25, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x16>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x20>
  e8:	00 00       	nop
			_delay_ms(100);
	     	USART_TransmitNumber(getDistance(0),0);
  ea:	80 e0       	ldi	r24, 0x00	; 0
  ec:	83 d0       	rcall	.+262    	; 0x1f4 <getDistance>
  ee:	13 d1       	rcall	.+550    	; 0x316 <__fixsfsi>
  f0:	40 e0       	ldi	r20, 0x00	; 0
  f2:	d5 d0       	rcall	.+426    	; 0x29e <USART_TransmitNumber>
	        USART_Transmitchar(0x0d,0);	
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	8d e0       	ldi	r24, 0x0D	; 13
  f8:	c4 d0       	rcall	.+392    	; 0x282 <USART_Transmitchar>
		}
  fa:	ec cf       	rjmp	.-40     	; 0xd4 <main+0xc>

000000fc <ultrasonic_init>:
volatile uint8_t trigger_PINS[3] = {0,1,3};
volatile int timerCapture[3] = {0,0,0};
volatile uint8_t echoFlag[3] = {0,0,0};
void ultrasonic_init() {
	//setting trigger PINS as outputs
	triggerDDR = (1 << trigger_PINS[0]) | (1 << trigger_PINS[1]) | (1 << trigger_PINS[2]);
  fc:	e0 e0       	ldi	r30, 0x00	; 0
  fe:	f1 e0       	ldi	r31, 0x01	; 1
 100:	20 81       	ld	r18, Z
 102:	31 81       	ldd	r19, Z+1	; 0x01
 104:	52 81       	ldd	r21, Z+2	; 0x02
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	bc 01       	movw	r22, r24
 10c:	02 c0       	rjmp	.+4      	; 0x112 <ultrasonic_init+0x16>
 10e:	66 0f       	add	r22, r22
 110:	77 1f       	adc	r23, r23
 112:	3a 95       	dec	r19
 114:	e2 f7       	brpl	.-8      	; 0x10e <ultrasonic_init+0x12>
 116:	fc 01       	movw	r30, r24
 118:	02 c0       	rjmp	.+4      	; 0x11e <ultrasonic_init+0x22>
 11a:	ee 0f       	add	r30, r30
 11c:	ff 1f       	adc	r31, r31
 11e:	2a 95       	dec	r18
 120:	e2 f7       	brpl	.-8      	; 0x11a <ultrasonic_init+0x1e>
 122:	46 2f       	mov	r20, r22
 124:	4e 2b       	or	r20, r30
 126:	9c 01       	movw	r18, r24
 128:	02 c0       	rjmp	.+4      	; 0x12e <ultrasonic_init+0x32>
 12a:	22 0f       	add	r18, r18
 12c:	33 1f       	adc	r19, r19
 12e:	5a 95       	dec	r21
 130:	e2 f7       	brpl	.-8      	; 0x12a <ultrasonic_init+0x2e>
 132:	24 2b       	or	r18, r20
 134:	20 93 61 00 	sts	0x0061, r18
	//timer init
	TCCR1B = preScalar0;
 138:	25 e0       	ldi	r18, 0x05	; 5
 13a:	2e bd       	out	0x2e, r18	; 46
	TCCR3B = preScalar1;
 13c:	20 93 8a 00 	sts	0x008A, r18
//	TCCR4B = preScalar2; 
	//interrupt init
	EICRB = falling_edge;
 140:	2a e0       	ldi	r18, 0x0A	; 10
 142:	2a bf       	out	0x3a, r18	; 58
	EIMSK = (1 << INT_PINS[0]);	// | (1 << INT_PINS[1]) | (1 << INT_PINS[2]);
 144:	20 91 03 01 	lds	r18, 0x0103
 148:	02 c0       	rjmp	.+4      	; 0x14e <ultrasonic_init+0x52>
 14a:	88 0f       	add	r24, r24
 14c:	99 1f       	adc	r25, r25
 14e:	2a 95       	dec	r18
 150:	e2 f7       	brpl	.-8      	; 0x14a <ultrasonic_init+0x4e>
 152:	89 bf       	out	0x39, r24	; 57
	sei();
 154:	78 94       	sei
 156:	08 95       	ret

00000158 <trigger>:
}

void trigger(uint8_t n) {
 158:	cf 93       	push	r28
 15a:	df 93       	push	r29
		
		if(echoFlag[n])		return;
 15c:	48 2f       	mov	r20, r24
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	fa 01       	movw	r30, r20
 162:	ea 5f       	subi	r30, 0xFA	; 250
 164:	fe 4f       	sbci	r31, 0xFE	; 254
 166:	90 81       	ld	r25, Z
 168:	91 11       	cpse	r25, r1
 16a:	41 c0       	rjmp	.+130    	; 0x1ee <trigger+0x96>
		triggerPort &=~(1<<trigger_PINS[n]);	//setting trig pin to low
 16c:	da 01       	movw	r26, r20
 16e:	a0 50       	subi	r26, 0x00	; 0
 170:	bf 4f       	sbci	r27, 0xFF	; 255
 172:	6c 91       	ld	r22, X
 174:	e2 e6       	ldi	r30, 0x62	; 98
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	90 81       	ld	r25, Z
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	e9 01       	movw	r28, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <trigger+0x2e>
 182:	cc 0f       	add	r28, r28
 184:	dd 1f       	adc	r29, r29
 186:	6a 95       	dec	r22
 188:	e2 f7       	brpl	.-8      	; 0x182 <trigger+0x2a>
 18a:	be 01       	movw	r22, r28
 18c:	60 95       	com	r22
 18e:	70 95       	com	r23
 190:	69 23       	and	r22, r25
 192:	60 83       	st	Z, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	d5 e0       	ldi	r29, 0x05	; 5
 196:	da 95       	dec	r29
 198:	f1 f7       	brne	.-4      	; 0x196 <trigger+0x3e>
 19a:	00 00       	nop
		_delay_us(2);			//delay to let signal settle
		triggerPort |= (1<<trigger_PINS[n]); 	//setting trig pin to high to activate sensor
 19c:	6c 91       	ld	r22, X
 19e:	90 81       	ld	r25, Z
 1a0:	e9 01       	movw	r28, r18
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <trigger+0x50>
 1a4:	cc 0f       	add	r28, r28
 1a6:	dd 1f       	adc	r29, r29
 1a8:	6a 95       	dec	r22
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <trigger+0x4c>
 1ac:	be 01       	movw	r22, r28
 1ae:	69 2b       	or	r22, r25
 1b0:	60 83       	st	Z, r22
 1b2:	d8 e2       	ldi	r29, 0x28	; 40
 1b4:	da 95       	dec	r29
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <trigger+0x5c>
		_delay_us(15);			//pause in high state greater than 10us
		triggerPort &= ~(1<<trigger_PINS[n]);	//bring trig pin back to low
 1b8:	6c 91       	ld	r22, X
 1ba:	90 81       	ld	r25, Z
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <trigger+0x6a>
 1be:	22 0f       	add	r18, r18
 1c0:	33 1f       	adc	r19, r19
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <trigger+0x66>
 1c6:	20 95       	com	r18
 1c8:	30 95       	com	r19
 1ca:	29 23       	and	r18, r25
 1cc:	20 83       	st	Z, r18
		echoFlag[n] = 1;
 1ce:	fa 01       	movw	r30, r20
 1d0:	ea 5f       	subi	r30, 0xFA	; 250
 1d2:	fe 4f       	sbci	r31, 0xFE	; 254
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	90 83       	st	Z, r25
		//assigning timer counter value zero
		if (n == 0)			timerCounter0 = 0;
 1d8:	81 11       	cpse	r24, r1
 1da:	03 c0       	rjmp	.+6      	; 0x1e2 <trigger+0x8a>
 1dc:	1d bc       	out	0x2d, r1	; 45
 1de:	1c bc       	out	0x2c, r1	; 44
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <trigger+0x96>
		else if(n == 1)		timerCounter1 = 0;
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	21 f4       	brne	.+8      	; 0x1ee <trigger+0x96>
 1e6:	10 92 89 00 	sts	0x0089, r1
 1ea:	10 92 88 00 	sts	0x0088, r1
	//	else if(n == 2)		timerCounter2 = 0;
}
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <getDistance>:

float getDistance(uint8_t n) {
			return timerCapture[n] * 2.1;
 1f4:	e8 2f       	mov	r30, r24
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	ee 0f       	add	r30, r30
 1fa:	ff 1f       	adc	r31, r31
 1fc:	e7 5f       	subi	r30, 0xF7	; 247
 1fe:	fe 4f       	sbci	r31, 0xFE	; 254
 200:	60 81       	ld	r22, Z
 202:	71 81       	ldd	r23, Z+1	; 0x01
 204:	07 2e       	mov	r0, r23
 206:	00 0c       	add	r0, r0
 208:	88 0b       	sbc	r24, r24
 20a:	99 0b       	sbc	r25, r25
 20c:	b7 d0       	rcall	.+366    	; 0x37c <__floatsisf>
 20e:	26 e6       	ldi	r18, 0x66	; 102
 210:	36 e6       	ldi	r19, 0x66	; 102
 212:	46 e0       	ldi	r20, 0x06	; 6
 214:	50 e4       	ldi	r21, 0x40	; 64
 216:	16 c1       	rjmp	.+556    	; 0x444 <__mulsf3>
}
 218:	08 95       	ret

0000021a <__vector_5>:

ISR(INT4_vect) {
 21a:	1f 92       	push	r1
 21c:	0f 92       	push	r0
 21e:	0f b6       	in	r0, 0x3f	; 63
 220:	0f 92       	push	r0
 222:	11 24       	eor	r1, r1
 224:	8f 93       	push	r24
 226:	9f 93       	push	r25
		timerCapture[0] = timerCounter0;
 228:	8c b5       	in	r24, 0x2c	; 44
 22a:	9d b5       	in	r25, 0x2d	; 45
 22c:	90 93 0a 01 	sts	0x010A, r25
 230:	80 93 09 01 	sts	0x0109, r24
		echoFlag[0] = 0;
 234:	10 92 06 01 	sts	0x0106, r1
}
 238:	9f 91       	pop	r25
 23a:	8f 91       	pop	r24
 23c:	0f 90       	pop	r0
 23e:	0f be       	out	0x3f, r0	; 63
 240:	0f 90       	pop	r0
 242:	1f 90       	pop	r1
 244:	18 95       	reti

00000246 <USART_Init>:
	 {
		 USART_Transmitchar(*str,n);
		 //_delay_ms(1);
		 str++;
	 }
}
 246:	78 94       	sei
 248:	66 23       	and	r22, r22
 24a:	79 f0       	breq	.+30     	; 0x26a <USART_Init+0x24>
 24c:	90 93 98 00 	sts	0x0098, r25
 250:	80 93 99 00 	sts	0x0099, r24
 254:	ea e9       	ldi	r30, 0x9A	; 154
 256:	f0 e0       	ldi	r31, 0x00	; 0
 258:	80 81       	ld	r24, Z
 25a:	88 61       	ori	r24, 0x18	; 24
 25c:	80 83       	st	Z, r24
 25e:	ed e9       	ldi	r30, 0x9D	; 157
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	86 60       	ori	r24, 0x06	; 6
 266:	80 83       	st	Z, r24
 268:	08 95       	ret
 26a:	90 93 90 00 	sts	0x0090, r25
 26e:	89 b9       	out	0x09, r24	; 9
 270:	8a b1       	in	r24, 0x0a	; 10
 272:	88 61       	ori	r24, 0x18	; 24
 274:	8a b9       	out	0x0a, r24	; 10
 276:	e5 e9       	ldi	r30, 0x95	; 149
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	86 60       	ori	r24, 0x06	; 6
 27e:	80 83       	st	Z, r24
 280:	08 95       	ret

00000282 <USART_Transmitchar>:
 282:	66 23       	and	r22, r22
 284:	41 f0       	breq	.+16     	; 0x296 <USART_Transmitchar+0x14>
 286:	eb e9       	ldi	r30, 0x9B	; 155
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	90 81       	ld	r25, Z
 28c:	95 ff       	sbrs	r25, 5
 28e:	fd cf       	rjmp	.-6      	; 0x28a <USART_Transmitchar+0x8>
 290:	80 93 9c 00 	sts	0x009C, r24
 294:	08 95       	ret
 296:	5d 9b       	sbis	0x0b, 5	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <USART_Transmitchar+0x14>
 29a:	8c b9       	out	0x0c, r24	; 12
 29c:	08 95       	ret

0000029e <USART_TransmitNumber>:

void USART_TransmitNumber(long int num, uint8_t n)
{
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	6b 01       	movw	r12, r22
 2b2:	7c 01       	movw	r14, r24
 2b4:	c4 2f       	mov	r28, r20
	if(num<0)
 2b6:	99 23       	and	r25, r25
 2b8:	5c f4       	brge	.+22     	; 0x2d0 <USART_TransmitNumber+0x32>
	{
		USART_Transmitchar('-',n);
 2ba:	64 2f       	mov	r22, r20
 2bc:	8d e2       	ldi	r24, 0x2D	; 45
 2be:	e1 df       	rcall	.-62     	; 0x282 <USART_Transmitchar>
		num=(-1)*num;
 2c0:	f0 94       	com	r15
 2c2:	e0 94       	com	r14
 2c4:	d0 94       	com	r13
 2c6:	c0 94       	com	r12
 2c8:	c1 1c       	adc	r12, r1
 2ca:	d1 1c       	adc	r13, r1
 2cc:	e1 1c       	adc	r14, r1
 2ce:	f1 1c       	adc	r15, r1
	}
	
	if(num >= 10){
 2d0:	8a e0       	ldi	r24, 0x0A	; 10
 2d2:	c8 16       	cp	r12, r24
 2d4:	d1 04       	cpc	r13, r1
 2d6:	e1 04       	cpc	r14, r1
 2d8:	f1 04       	cpc	r15, r1
 2da:	7c f0       	brlt	.+30     	; 0x2fa <USART_TransmitNumber+0x5c>
    USART_TransmitNumber(num/10,n);
 2dc:	c7 01       	movw	r24, r14
 2de:	b6 01       	movw	r22, r12
 2e0:	2a e0       	ldi	r18, 0x0A	; 10
 2e2:	30 e0       	ldi	r19, 0x00	; 0
 2e4:	40 e0       	ldi	r20, 0x00	; 0
 2e6:	50 e0       	ldi	r21, 0x00	; 0
 2e8:	38 d1       	rcall	.+624    	; 0x55a <__divmodsi4>
 2ea:	69 01       	movw	r12, r18
 2ec:	7a 01       	movw	r14, r20
 2ee:	b6 2e       	mov	r11, r22
 2f0:	4c 2f       	mov	r20, r28
 2f2:	c7 01       	movw	r24, r14
 2f4:	b6 01       	movw	r22, r12
 2f6:	d3 df       	rcall	.-90     	; 0x29e <USART_TransmitNumber>
    num = num%10;
 2f8:	cb 2c       	mov	r12, r11
  }
  USART_Transmitchar(num+'0',n); /* n is between 0 and 9 */
 2fa:	6c 2f       	mov	r22, r28
 2fc:	80 e3       	ldi	r24, 0x30	; 48
 2fe:	8c 0d       	add	r24, r12
 300:	c0 df       	rcall	.-128    	; 0x282 <USART_Transmitchar>
	
}
 302:	df 91       	pop	r29
 304:	cf 91       	pop	r28
 306:	1f 91       	pop	r17
 308:	0f 91       	pop	r16
 30a:	ff 90       	pop	r15
 30c:	ef 90       	pop	r14
 30e:	df 90       	pop	r13
 310:	cf 90       	pop	r12
 312:	bf 90       	pop	r11
 314:	08 95       	ret

00000316 <__fixsfsi>:
 316:	04 d0       	rcall	.+8      	; 0x320 <__fixunssfsi>
 318:	68 94       	set
 31a:	b1 11       	cpse	r27, r1
 31c:	8d c0       	rjmp	.+282    	; 0x438 <__fp_szero>
 31e:	08 95       	ret

00000320 <__fixunssfsi>:
 320:	70 d0       	rcall	.+224    	; 0x402 <__fp_splitA>
 322:	88 f0       	brcs	.+34     	; 0x346 <__fixunssfsi+0x26>
 324:	9f 57       	subi	r25, 0x7F	; 127
 326:	90 f0       	brcs	.+36     	; 0x34c <__fixunssfsi+0x2c>
 328:	b9 2f       	mov	r27, r25
 32a:	99 27       	eor	r25, r25
 32c:	b7 51       	subi	r27, 0x17	; 23
 32e:	a0 f0       	brcs	.+40     	; 0x358 <__fixunssfsi+0x38>
 330:	d1 f0       	breq	.+52     	; 0x366 <__fixunssfsi+0x46>
 332:	66 0f       	add	r22, r22
 334:	77 1f       	adc	r23, r23
 336:	88 1f       	adc	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	1a f0       	brmi	.+6      	; 0x342 <__fixunssfsi+0x22>
 33c:	ba 95       	dec	r27
 33e:	c9 f7       	brne	.-14     	; 0x332 <__fixunssfsi+0x12>
 340:	12 c0       	rjmp	.+36     	; 0x366 <__fixunssfsi+0x46>
 342:	b1 30       	cpi	r27, 0x01	; 1
 344:	81 f0       	breq	.+32     	; 0x366 <__fixunssfsi+0x46>
 346:	77 d0       	rcall	.+238    	; 0x436 <__fp_zero>
 348:	b1 e0       	ldi	r27, 0x01	; 1
 34a:	08 95       	ret
 34c:	74 c0       	rjmp	.+232    	; 0x436 <__fp_zero>
 34e:	67 2f       	mov	r22, r23
 350:	78 2f       	mov	r23, r24
 352:	88 27       	eor	r24, r24
 354:	b8 5f       	subi	r27, 0xF8	; 248
 356:	39 f0       	breq	.+14     	; 0x366 <__fixunssfsi+0x46>
 358:	b9 3f       	cpi	r27, 0xF9	; 249
 35a:	cc f3       	brlt	.-14     	; 0x34e <__fixunssfsi+0x2e>
 35c:	86 95       	lsr	r24
 35e:	77 95       	ror	r23
 360:	67 95       	ror	r22
 362:	b3 95       	inc	r27
 364:	d9 f7       	brne	.-10     	; 0x35c <__fixunssfsi+0x3c>
 366:	3e f4       	brtc	.+14     	; 0x376 <__fixunssfsi+0x56>
 368:	90 95       	com	r25
 36a:	80 95       	com	r24
 36c:	70 95       	com	r23
 36e:	61 95       	neg	r22
 370:	7f 4f       	sbci	r23, 0xFF	; 255
 372:	8f 4f       	sbci	r24, 0xFF	; 255
 374:	9f 4f       	sbci	r25, 0xFF	; 255
 376:	08 95       	ret

00000378 <__floatunsisf>:
 378:	e8 94       	clt
 37a:	09 c0       	rjmp	.+18     	; 0x38e <__floatsisf+0x12>

0000037c <__floatsisf>:
 37c:	97 fb       	bst	r25, 7
 37e:	3e f4       	brtc	.+14     	; 0x38e <__floatsisf+0x12>
 380:	90 95       	com	r25
 382:	80 95       	com	r24
 384:	70 95       	com	r23
 386:	61 95       	neg	r22
 388:	7f 4f       	sbci	r23, 0xFF	; 255
 38a:	8f 4f       	sbci	r24, 0xFF	; 255
 38c:	9f 4f       	sbci	r25, 0xFF	; 255
 38e:	99 23       	and	r25, r25
 390:	a9 f0       	breq	.+42     	; 0x3bc <__floatsisf+0x40>
 392:	f9 2f       	mov	r31, r25
 394:	96 e9       	ldi	r25, 0x96	; 150
 396:	bb 27       	eor	r27, r27
 398:	93 95       	inc	r25
 39a:	f6 95       	lsr	r31
 39c:	87 95       	ror	r24
 39e:	77 95       	ror	r23
 3a0:	67 95       	ror	r22
 3a2:	b7 95       	ror	r27
 3a4:	f1 11       	cpse	r31, r1
 3a6:	f8 cf       	rjmp	.-16     	; 0x398 <__floatsisf+0x1c>
 3a8:	fa f4       	brpl	.+62     	; 0x3e8 <__floatsisf+0x6c>
 3aa:	bb 0f       	add	r27, r27
 3ac:	11 f4       	brne	.+4      	; 0x3b2 <__floatsisf+0x36>
 3ae:	60 ff       	sbrs	r22, 0
 3b0:	1b c0       	rjmp	.+54     	; 0x3e8 <__floatsisf+0x6c>
 3b2:	6f 5f       	subi	r22, 0xFF	; 255
 3b4:	7f 4f       	sbci	r23, 0xFF	; 255
 3b6:	8f 4f       	sbci	r24, 0xFF	; 255
 3b8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ba:	16 c0       	rjmp	.+44     	; 0x3e8 <__floatsisf+0x6c>
 3bc:	88 23       	and	r24, r24
 3be:	11 f0       	breq	.+4      	; 0x3c4 <__floatsisf+0x48>
 3c0:	96 e9       	ldi	r25, 0x96	; 150
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <__floatsisf+0x6a>
 3c4:	77 23       	and	r23, r23
 3c6:	21 f0       	breq	.+8      	; 0x3d0 <__floatsisf+0x54>
 3c8:	9e e8       	ldi	r25, 0x8E	; 142
 3ca:	87 2f       	mov	r24, r23
 3cc:	76 2f       	mov	r23, r22
 3ce:	05 c0       	rjmp	.+10     	; 0x3da <__floatsisf+0x5e>
 3d0:	66 23       	and	r22, r22
 3d2:	71 f0       	breq	.+28     	; 0x3f0 <__floatsisf+0x74>
 3d4:	96 e8       	ldi	r25, 0x86	; 134
 3d6:	86 2f       	mov	r24, r22
 3d8:	70 e0       	ldi	r23, 0x00	; 0
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	2a f0       	brmi	.+10     	; 0x3e8 <__floatsisf+0x6c>
 3de:	9a 95       	dec	r25
 3e0:	66 0f       	add	r22, r22
 3e2:	77 1f       	adc	r23, r23
 3e4:	88 1f       	adc	r24, r24
 3e6:	da f7       	brpl	.-10     	; 0x3de <__floatsisf+0x62>
 3e8:	88 0f       	add	r24, r24
 3ea:	96 95       	lsr	r25
 3ec:	87 95       	ror	r24
 3ee:	97 f9       	bld	r25, 7
 3f0:	08 95       	ret

000003f2 <__fp_split3>:
 3f2:	57 fd       	sbrc	r21, 7
 3f4:	90 58       	subi	r25, 0x80	; 128
 3f6:	44 0f       	add	r20, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	59 f0       	breq	.+22     	; 0x412 <__fp_splitA+0x10>
 3fc:	5f 3f       	cpi	r21, 0xFF	; 255
 3fe:	71 f0       	breq	.+28     	; 0x41c <__fp_splitA+0x1a>
 400:	47 95       	ror	r20

00000402 <__fp_splitA>:
 402:	88 0f       	add	r24, r24
 404:	97 fb       	bst	r25, 7
 406:	99 1f       	adc	r25, r25
 408:	61 f0       	breq	.+24     	; 0x422 <__fp_splitA+0x20>
 40a:	9f 3f       	cpi	r25, 0xFF	; 255
 40c:	79 f0       	breq	.+30     	; 0x42c <__fp_splitA+0x2a>
 40e:	87 95       	ror	r24
 410:	08 95       	ret
 412:	12 16       	cp	r1, r18
 414:	13 06       	cpc	r1, r19
 416:	14 06       	cpc	r1, r20
 418:	55 1f       	adc	r21, r21
 41a:	f2 cf       	rjmp	.-28     	; 0x400 <__fp_split3+0xe>
 41c:	46 95       	lsr	r20
 41e:	f1 df       	rcall	.-30     	; 0x402 <__fp_splitA>
 420:	08 c0       	rjmp	.+16     	; 0x432 <__fp_splitA+0x30>
 422:	16 16       	cp	r1, r22
 424:	17 06       	cpc	r1, r23
 426:	18 06       	cpc	r1, r24
 428:	99 1f       	adc	r25, r25
 42a:	f1 cf       	rjmp	.-30     	; 0x40e <__fp_splitA+0xc>
 42c:	86 95       	lsr	r24
 42e:	71 05       	cpc	r23, r1
 430:	61 05       	cpc	r22, r1
 432:	08 94       	sec
 434:	08 95       	ret

00000436 <__fp_zero>:
 436:	e8 94       	clt

00000438 <__fp_szero>:
 438:	bb 27       	eor	r27, r27
 43a:	66 27       	eor	r22, r22
 43c:	77 27       	eor	r23, r23
 43e:	cb 01       	movw	r24, r22
 440:	97 f9       	bld	r25, 7
 442:	08 95       	ret

00000444 <__mulsf3>:
 444:	0b d0       	rcall	.+22     	; 0x45c <__mulsf3x>
 446:	78 c0       	rjmp	.+240    	; 0x538 <__fp_round>
 448:	69 d0       	rcall	.+210    	; 0x51c <__fp_pscA>
 44a:	28 f0       	brcs	.+10     	; 0x456 <__mulsf3+0x12>
 44c:	6e d0       	rcall	.+220    	; 0x52a <__fp_pscB>
 44e:	18 f0       	brcs	.+6      	; 0x456 <__mulsf3+0x12>
 450:	95 23       	and	r25, r21
 452:	09 f0       	breq	.+2      	; 0x456 <__mulsf3+0x12>
 454:	5a c0       	rjmp	.+180    	; 0x50a <__fp_inf>
 456:	5f c0       	rjmp	.+190    	; 0x516 <__fp_nan>
 458:	11 24       	eor	r1, r1
 45a:	ee cf       	rjmp	.-36     	; 0x438 <__fp_szero>

0000045c <__mulsf3x>:
 45c:	ca df       	rcall	.-108    	; 0x3f2 <__fp_split3>
 45e:	a0 f3       	brcs	.-24     	; 0x448 <__mulsf3+0x4>

00000460 <__mulsf3_pse>:
 460:	95 9f       	mul	r25, r21
 462:	d1 f3       	breq	.-12     	; 0x458 <__mulsf3+0x14>
 464:	95 0f       	add	r25, r21
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	55 1f       	adc	r21, r21
 46a:	62 9f       	mul	r22, r18
 46c:	f0 01       	movw	r30, r0
 46e:	72 9f       	mul	r23, r18
 470:	bb 27       	eor	r27, r27
 472:	f0 0d       	add	r31, r0
 474:	b1 1d       	adc	r27, r1
 476:	63 9f       	mul	r22, r19
 478:	aa 27       	eor	r26, r26
 47a:	f0 0d       	add	r31, r0
 47c:	b1 1d       	adc	r27, r1
 47e:	aa 1f       	adc	r26, r26
 480:	64 9f       	mul	r22, r20
 482:	66 27       	eor	r22, r22
 484:	b0 0d       	add	r27, r0
 486:	a1 1d       	adc	r26, r1
 488:	66 1f       	adc	r22, r22
 48a:	82 9f       	mul	r24, r18
 48c:	22 27       	eor	r18, r18
 48e:	b0 0d       	add	r27, r0
 490:	a1 1d       	adc	r26, r1
 492:	62 1f       	adc	r22, r18
 494:	73 9f       	mul	r23, r19
 496:	b0 0d       	add	r27, r0
 498:	a1 1d       	adc	r26, r1
 49a:	62 1f       	adc	r22, r18
 49c:	83 9f       	mul	r24, r19
 49e:	a0 0d       	add	r26, r0
 4a0:	61 1d       	adc	r22, r1
 4a2:	22 1f       	adc	r18, r18
 4a4:	74 9f       	mul	r23, r20
 4a6:	33 27       	eor	r19, r19
 4a8:	a0 0d       	add	r26, r0
 4aa:	61 1d       	adc	r22, r1
 4ac:	23 1f       	adc	r18, r19
 4ae:	84 9f       	mul	r24, r20
 4b0:	60 0d       	add	r22, r0
 4b2:	21 1d       	adc	r18, r1
 4b4:	82 2f       	mov	r24, r18
 4b6:	76 2f       	mov	r23, r22
 4b8:	6a 2f       	mov	r22, r26
 4ba:	11 24       	eor	r1, r1
 4bc:	9f 57       	subi	r25, 0x7F	; 127
 4be:	50 40       	sbci	r21, 0x00	; 0
 4c0:	8a f0       	brmi	.+34     	; 0x4e4 <__mulsf3_pse+0x84>
 4c2:	e1 f0       	breq	.+56     	; 0x4fc <__mulsf3_pse+0x9c>
 4c4:	88 23       	and	r24, r24
 4c6:	4a f0       	brmi	.+18     	; 0x4da <__mulsf3_pse+0x7a>
 4c8:	ee 0f       	add	r30, r30
 4ca:	ff 1f       	adc	r31, r31
 4cc:	bb 1f       	adc	r27, r27
 4ce:	66 1f       	adc	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	91 50       	subi	r25, 0x01	; 1
 4d6:	50 40       	sbci	r21, 0x00	; 0
 4d8:	a9 f7       	brne	.-22     	; 0x4c4 <__mulsf3_pse+0x64>
 4da:	9e 3f       	cpi	r25, 0xFE	; 254
 4dc:	51 05       	cpc	r21, r1
 4de:	70 f0       	brcs	.+28     	; 0x4fc <__mulsf3_pse+0x9c>
 4e0:	14 c0       	rjmp	.+40     	; 0x50a <__fp_inf>
 4e2:	aa cf       	rjmp	.-172    	; 0x438 <__fp_szero>
 4e4:	5f 3f       	cpi	r21, 0xFF	; 255
 4e6:	ec f3       	brlt	.-6      	; 0x4e2 <__mulsf3_pse+0x82>
 4e8:	98 3e       	cpi	r25, 0xE8	; 232
 4ea:	dc f3       	brlt	.-10     	; 0x4e2 <__mulsf3_pse+0x82>
 4ec:	86 95       	lsr	r24
 4ee:	77 95       	ror	r23
 4f0:	67 95       	ror	r22
 4f2:	b7 95       	ror	r27
 4f4:	f7 95       	ror	r31
 4f6:	e7 95       	ror	r30
 4f8:	9f 5f       	subi	r25, 0xFF	; 255
 4fa:	c1 f7       	brne	.-16     	; 0x4ec <__mulsf3_pse+0x8c>
 4fc:	fe 2b       	or	r31, r30
 4fe:	88 0f       	add	r24, r24
 500:	91 1d       	adc	r25, r1
 502:	96 95       	lsr	r25
 504:	87 95       	ror	r24
 506:	97 f9       	bld	r25, 7
 508:	08 95       	ret

0000050a <__fp_inf>:
 50a:	97 f9       	bld	r25, 7
 50c:	9f 67       	ori	r25, 0x7F	; 127
 50e:	80 e8       	ldi	r24, 0x80	; 128
 510:	70 e0       	ldi	r23, 0x00	; 0
 512:	60 e0       	ldi	r22, 0x00	; 0
 514:	08 95       	ret

00000516 <__fp_nan>:
 516:	9f ef       	ldi	r25, 0xFF	; 255
 518:	80 ec       	ldi	r24, 0xC0	; 192
 51a:	08 95       	ret

0000051c <__fp_pscA>:
 51c:	00 24       	eor	r0, r0
 51e:	0a 94       	dec	r0
 520:	16 16       	cp	r1, r22
 522:	17 06       	cpc	r1, r23
 524:	18 06       	cpc	r1, r24
 526:	09 06       	cpc	r0, r25
 528:	08 95       	ret

0000052a <__fp_pscB>:
 52a:	00 24       	eor	r0, r0
 52c:	0a 94       	dec	r0
 52e:	12 16       	cp	r1, r18
 530:	13 06       	cpc	r1, r19
 532:	14 06       	cpc	r1, r20
 534:	05 06       	cpc	r0, r21
 536:	08 95       	ret

00000538 <__fp_round>:
 538:	09 2e       	mov	r0, r25
 53a:	03 94       	inc	r0
 53c:	00 0c       	add	r0, r0
 53e:	11 f4       	brne	.+4      	; 0x544 <__fp_round+0xc>
 540:	88 23       	and	r24, r24
 542:	52 f0       	brmi	.+20     	; 0x558 <__fp_round+0x20>
 544:	bb 0f       	add	r27, r27
 546:	40 f4       	brcc	.+16     	; 0x558 <__fp_round+0x20>
 548:	bf 2b       	or	r27, r31
 54a:	11 f4       	brne	.+4      	; 0x550 <__fp_round+0x18>
 54c:	60 ff       	sbrs	r22, 0
 54e:	04 c0       	rjmp	.+8      	; 0x558 <__fp_round+0x20>
 550:	6f 5f       	subi	r22, 0xFF	; 255
 552:	7f 4f       	sbci	r23, 0xFF	; 255
 554:	8f 4f       	sbci	r24, 0xFF	; 255
 556:	9f 4f       	sbci	r25, 0xFF	; 255
 558:	08 95       	ret

0000055a <__divmodsi4>:
 55a:	05 2e       	mov	r0, r21
 55c:	97 fb       	bst	r25, 7
 55e:	16 f4       	brtc	.+4      	; 0x564 <__divmodsi4+0xa>
 560:	00 94       	com	r0
 562:	0f d0       	rcall	.+30     	; 0x582 <__negsi2>
 564:	57 fd       	sbrc	r21, 7
 566:	05 d0       	rcall	.+10     	; 0x572 <__divmodsi4_neg2>
 568:	14 d0       	rcall	.+40     	; 0x592 <__udivmodsi4>
 56a:	07 fc       	sbrc	r0, 7
 56c:	02 d0       	rcall	.+4      	; 0x572 <__divmodsi4_neg2>
 56e:	46 f4       	brtc	.+16     	; 0x580 <__divmodsi4_exit>
 570:	08 c0       	rjmp	.+16     	; 0x582 <__negsi2>

00000572 <__divmodsi4_neg2>:
 572:	50 95       	com	r21
 574:	40 95       	com	r20
 576:	30 95       	com	r19
 578:	21 95       	neg	r18
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
 57c:	4f 4f       	sbci	r20, 0xFF	; 255
 57e:	5f 4f       	sbci	r21, 0xFF	; 255

00000580 <__divmodsi4_exit>:
 580:	08 95       	ret

00000582 <__negsi2>:
 582:	90 95       	com	r25
 584:	80 95       	com	r24
 586:	70 95       	com	r23
 588:	61 95       	neg	r22
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	08 95       	ret

00000592 <__udivmodsi4>:
 592:	a1 e2       	ldi	r26, 0x21	; 33
 594:	1a 2e       	mov	r1, r26
 596:	aa 1b       	sub	r26, r26
 598:	bb 1b       	sub	r27, r27
 59a:	fd 01       	movw	r30, r26
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <__udivmodsi4_ep>

0000059e <__udivmodsi4_loop>:
 59e:	aa 1f       	adc	r26, r26
 5a0:	bb 1f       	adc	r27, r27
 5a2:	ee 1f       	adc	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	a2 17       	cp	r26, r18
 5a8:	b3 07       	cpc	r27, r19
 5aa:	e4 07       	cpc	r30, r20
 5ac:	f5 07       	cpc	r31, r21
 5ae:	20 f0       	brcs	.+8      	; 0x5b8 <__udivmodsi4_ep>
 5b0:	a2 1b       	sub	r26, r18
 5b2:	b3 0b       	sbc	r27, r19
 5b4:	e4 0b       	sbc	r30, r20
 5b6:	f5 0b       	sbc	r31, r21

000005b8 <__udivmodsi4_ep>:
 5b8:	66 1f       	adc	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	88 1f       	adc	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	1a 94       	dec	r1
 5c2:	69 f7       	brne	.-38     	; 0x59e <__udivmodsi4_loop>
 5c4:	60 95       	com	r22
 5c6:	70 95       	com	r23
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	9b 01       	movw	r18, r22
 5ce:	ac 01       	movw	r20, r24
 5d0:	bd 01       	movw	r22, r26
 5d2:	cf 01       	movw	r24, r30
 5d4:	08 95       	ret

000005d6 <_exit>:
 5d6:	f8 94       	cli

000005d8 <__stop_program>:
 5d8:	ff cf       	rjmp	.-2      	; 0x5d8 <__stop_program>
